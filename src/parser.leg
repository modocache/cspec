
%{
  #include "cspec.h"

  #define YYSTYPE char *
  
  #define LPAREN '{'
  #define RPAREN '}'

  #define DUP yy = strdup(yytext)
  
  #define LITERAL printf("%s", yytext)
  
  #define NODE(T) current = nodeType##T, buf = NULL;
    
  #define NODE2(T, S) current = nodeType##T, buf = S;
  
  #define END printf("\n%c\n", RPAREN);  
  
  #define YY_INPUT(buf, result, max_size) { \
      int yyc = getc(stdin); \
      result = (EOF == yyc) ? 0 : (*(buf) = yyc, 1); \
      yyprintf((stderr, "<%c>", yyc)); \
    }
    
  #define SUITE(S) \
    printf("Suite *suite_%d = Suite_new(%s);\n", nsuites++, S);
    
  #define SPEC(S) BLOCK("Spec", S);
        
  #define BLOCK(S, D) \
    printf("Block *block_%d = Block_new(blockType%s, %s, &block_%d_callback);\n", nblocks, S, D == NULL ? "NULL" : D, nblocks); \
    printf("Suite_push_block(suite_%d, block_%d);\n", nsuites-1, nblocks); \
    nblocks++;
    
  #define BLOCK_CALLBACK \
    printf("void block_%d_callback() %c\n", nblocks, LPAREN);
    
  #define OUT \
    switch (current) { \
      case nodeTypeBefore    : END; BLOCK("Before", buf); break; \
      case nodeTypeBeforeEach: END; BLOCK("BeforeEach", buf); break; \
      case nodeTypeAfter     : END; BLOCK("After", buf); break; \
      case nodeTypeAfterEach : END; BLOCK("AfterEach", buf); break; \
      case nodeTypeSpec      : END; SPEC(buf); break; \
    } \
    current = nodeTypeNone;
  
  typedef enum {
    nodeTypeNone,
    nodeTypeBeforeEach,
    nodeTypeAfterEach,
    nodeTypeBefore,
    nodeTypeAfter,
    nodeTypeSpec
  } nodeType;
  
  static int nsuites = 0;
  static int nblocks = 0;
  static nodeType current = nodeTypeNone;
  static char *buf = NULL;
%}

  main         = < (!'describe' .)+ >                     { LITERAL }
               ( suite
               | spec
               | block
               | end                                      { OUT }
               | < . >                                    { LITERAL }
               )*
            
  suite        = 'describe' s a:string                    { SUITE(a) } 

  spec         = 'it' s a:string                          { NODE2(Spec, a); BLOCK_CALLBACK }
               
  block        = ( ws 'before each' ws                    { NODE(BeforeEach) }
               | ws 'before' ws                           { NODE(Before) }
               | ws 'after each' ws                       { NODE(AfterEach) }
               | ws 'after' ws                            { NODE(After) }
               )                                          { BLOCK_CALLBACK }
               
  string       = < '"' (!'"' .)* '"' >                    { DUP }

  ws           = ' ' | '\t' | nl
  end          = ws? 'end' ws?
  EOL          = nl | EOF                                
  EOF          = !.                                      
  nl           = '\n' | '\r\n' | '\r'                    
  s            = [ \t]+                                  
  -            = [ \t]*                                  
                                                         
%%


int main() {
  while (YYPARSE()) ;
  return 0;
}