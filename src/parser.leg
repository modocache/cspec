
%{
  #include "cspec.h"

  #define YYSTYPE char *

  #define DUP yy = strdup(yytext)
  
  #define OUT printf("%s", yytext)
  
  #define YY_INPUT(buf, result, max_size) { \
      int yyc = getc(stdin); \
      result = (EOF == yyc) ? 0 : (*(buf) = yyc, 1); \
      yyprintf((stderr, "<%c>", yyc)); \
    }
    
  #define SUITE(S) \
    printf("Suite *suite_%d = Suite_new(%s);\n", nsuites++, S);
    
  #define SPEC(S) \
    BLOCK("Spec", S) \
    printf("Suite_push_block(suite_%d, block_%d);\n", nsuites, nblocks-1);
        
  #define BLOCK(S, D) \
    printf("Block *block_%d = Block_new(blockType%s, %s, &block_%d_callback);\n", nblocks, S, D == NULL ? "NULL" : D, nblocks); \
    nblocks++;
    
  #define CODE(S) \
    printf("void block_%d_callback() {\n %s \n}\n", nblocks-1, S);
  
  static int nsuites = 0;
  static int nblocks = 0;
    
%}

  main         = < (!'describe' .)+ >                     { OUT }
               | suite
            
  suite        = 'describe' s a:string                    { SUITE(a) } 
               (ws | spec | block | suite)*
               end

  spec         = 'it' s a:string 
               b:source
               end                                        { CODE(b); SPEC(a) }
               
  block        = 
               ( b 'before each' b                        { BLOCK("BeforeEach", NULL) }
               | b 'before' b                             { BLOCK("Before", NULL) }
               | b 'after each' b                         { BLOCK("AfterEach", NULL) }
               | b 'after' b                              { BLOCK("After", NULL) }
               )                            
               a:source                                   { CODE(a) }
               end
               
  source       = < (!end .)+ > end                        { DUP }
               
  string       = < '\'' (!'\'' .)* '\'' >                 { DUP }
               | < '"' (!'"' .)* '"' >                    { DUP }

  ws           = [ \t] | nl
  end          = b 'end' b                                    
  b            = [ \t] | nl
  EOL          = nl | EOF                                
  EOF          = !.                                      
  nl           = '\n' | '\r\n' | '\r'                    
  s            = [ \t]+                                  
  -            = [ \t]*                                  
                                                         
%%

int main() {
  printf("void test() {\n");
  while (YYPARSE()) ;
  printf("\n}\n");
  return 0;
}