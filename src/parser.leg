
%{
  #include "cspec.h"

  #define YYSTYPE char *
  
  #define LPAREN '{'
  #define RPAREN '}'

  #define DUP \
    yy = strdup(yytext)
  
  #define NODE(T) \
    current = nodeType##T, buf2 = NULL;
    
  #define NODE2(T, S) \
    current = nodeType##T, buf2 = S;
  
  #define END \
    printf("\n%c\n", RPAREN);  
  
  #define DEFER(S, ...) \
    sprintf(buf, S "\n", __VA_ARGS__); strcat(defer, buf);
  
  #define YY_INPUT(buf, result, max_size) { \
      int yyc = getc(stdin); \
      result = (EOF == yyc) ? 0 : (*(buf) = yyc, 1); \
      yyprintf((stderr, "<%c>", yyc)); \
    }
    
  #define SUITE(S) \
    parent_suite = nsuites - 1; current_suite = nsuites; \
    DEFER("Suite *suite_%d = Suite_new(%s);\n", nsuites++, S); \
    if (parent_suite > -1) { \
      DEFER("Suite_push_suite(suite_%d, suite_%d);\n", parent_suite, current_suite) \
    } else { \
      DEFER("%c", ' ') \
    }
    
  #define SPEC(S) BLOCK("Spec", S);
        
  #define BLOCK(S, D) \
    DEFER("Block *block_%d = Block_new(blockType%s, %s, &block_%d_callback);\n", nblocks, S, D == NULL ? "NULL" : D, nblocks); \
    DEFER("Suite_push_block(suite_%d, block_%d);\n", nsuites-1, nblocks); \
    nblocks++;
    
  #define BLOCK_CALLBACK \
    printf("void block_%d_callback() %c\n", nblocks, LPAREN);
    
  #define ASSERTION(V, M, C, N) \
    printf(N ? "expect(!(match_%s(%s, %s)));\n" : \
               "expect((match_%s(%s, %s)));\n", M, V, C);
    
  #define OUT \
    switch (current) { \
      case nodeTypeBefore    : END; BLOCK("Before",     buf2); break; \
      case nodeTypeBeforeEach: END; BLOCK("BeforeEach", buf2); break; \
      case nodeTypeAfter     : END; BLOCK("After",      buf2); break; \
      case nodeTypeAfterEach : END; BLOCK("AfterEach",  buf2); break; \
      case nodeTypeSpec      : END; SPEC(buf2);                break; \
    } \
    current = nodeTypeNone;
  
  typedef enum {
    nodeTypeNone,
    nodeTypeBeforeEach,
    nodeTypeAfterEach,
    nodeTypeBefore,
    nodeTypeAfter,
    nodeTypeSpec
  } nodeType;
  
  static int nsuites = 0;
  static int nblocks = 0;
  static int parent_suite = 0;
  static int current_suite = 0;
  static nodeType current = nodeTypeNone;
  static char buf[CSPEC_BUFFER_SIZE];
  static char defer[CSPEC_BUFFER_SIZE];
  static char *buf2;
%}

  main         = < (!'describe' .)+ >                       
                 { puts(yytext) }
               ( suite                                      
               | spec                                       
               | block                                      
               | end                                        { OUT }
               | assertion                                  
               | < . >                                      
                 { printf("%s", yytext) }
               )*                                           
               
  expr         = < [a-zA-Z_]+ '.'  [a-zA-Z_]+ >             { DUP }
               | < [a-zA-Z_]+ '->' [a-zA-Z_]+  '[' (!']' .)* ']'> { DUP }
               | < [a-zA-Z_]+ '->' [a-zA-Z_]+ >             { DUP }
               | < [a-zA-Z_]+ '[' (!']' .)* ']' >           { DUP }
               | < [a-zA-Z_]+ '(' (!')' .)* ')' >           { DUP }
               | id
                                                            
  suite        = 'describe' s a:string                      { SUITE(a) } 
                                                            
  spec         = 'it' s a:string                            { NODE2(Spec, a); BLOCK_CALLBACK }
                                                            
  block        = ( ws 'before_each' ws                      { NODE(BeforeEach) }
               | ws 'before' ws                             { NODE(Before) }
               | ws 'after_each' ws                         { NODE(AfterEach) }
               | ws 'after' ws                              { NODE(After) }
               )                                            { BLOCK_CALLBACK }
               
  assertion    = a:expr s 'should' s 'not' s b:id c:consume { ASSERTION(a, b, c, 1) }
               | a:expr s 'should' s b:id c:consume         { ASSERTION(a, b, c, 0) }
               
  string       = < '"' (!'"' .)* '"' >                      { DUP }
                                                            
  consume      = < (!(EOL | ';') .)+ >                      { DUP }
  id           = < [a-zA-Z_]+ >                             { DUP }
  ws           = ' ' | '\t' | nl
  end          = ws? 'end' ws?
  EOL          = nl | EOF                                
  EOF          = !.                                      
  nl           = '\n' | '\r\n' | '\r'                    
  s            = [ \t]+                                  
  -            = [ \t]*                                  
                                                         
%%

static void usage() {
  printf(
    "\n  \033[1;01mCSpec\033[0m\n"
    "\n    The cspec binary converts the CSpec grammar into literal"
    "\n    C source via stdin and stdout."
    "\n"
    "\n  \033[1;01mUsage:\033[0m"
    "\n"
    "\n    cspec < spec/foo_spec.c > spec/foo.c"
    "\n"
    "\n");
}

int main(int argc, char **argv) {
  if (argc > 1)
    usage();
  else {
    DEFER("int main() %c\n", LPAREN)
    while (YYPARSE()) ;
    DEFER("Suite_run(suite_0);\n"
         "CSpec_stats();\n"
         "return 0;"
         "\n%c\n", RPAREN);
    puts(defer);
  }
  return 0;
}